// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod source_map_schema {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

// struct Mapping, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq, Default)]
pub struct Mapping(pub [u8; 24]);
impl std::fmt::Debug for Mapping {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    f.debug_struct("Mapping")
      .field("generated_line", &self.generated_line())
      .field("generated_column", &self.generated_column())
      .field("original_line", &self.original_line())
      .field("original_column", &self.original_column())
      .field("source", &self.source())
      .field("name", &self.name())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Mapping {}
impl flatbuffers::SafeSliceAccess for Mapping {}
impl<'a> flatbuffers::Follow<'a> for Mapping {
  type Inner = &'a Mapping;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Mapping>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Mapping {
  type Inner = &'a Mapping;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Mapping>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Mapping {
    type Output = Mapping;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Mapping as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Mapping {
    type Output = Mapping;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Mapping as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Mapping {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}
impl Mapping {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    generated_line: u32,
    generated_column: u32,
    original_line: i32,
    original_column: i32,
    source: i32,
    name: i32,
  ) -> Self {
    let mut s = Self([0; 24]);
    s.set_generated_line(generated_line);
    s.set_generated_column(generated_column);
    s.set_original_line(original_line);
    s.set_original_column(original_column);
    s.set_source(source);
    s.set_name(name);
    s
  }

  pub fn generated_line(&self) -> u32 {
    let mut mem = core::mem::MaybeUninit::<u32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<u32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_generated_line(&mut self, x: u32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const u32 as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<u32>(),
      );
    }
  }

  pub fn generated_column(&self) -> u32 {
    let mut mem = core::mem::MaybeUninit::<u32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<u32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_generated_column(&mut self, x: u32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const u32 as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<u32>(),
      );
    }
  }

  pub fn original_line(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<i32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<i32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_original_line(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const i32 as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<i32>(),
      );
    }
  }

  pub fn original_column(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<i32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[12..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<i32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_original_column(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const i32 as *const u8,
        self.0[12..].as_mut_ptr(),
        core::mem::size_of::<i32>(),
      );
    }
  }

  pub fn source(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<i32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[16..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<i32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_source(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const i32 as *const u8,
        self.0[16..].as_mut_ptr(),
        core::mem::size_of::<i32>(),
      );
    }
  }

  pub fn name(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<i32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[20..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<i32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_name(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const i32 as *const u8,
        self.0[20..].as_mut_ptr(),
        core::mem::size_of::<i32>(),
      );
    }
  }

}

pub enum MapOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Map<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Map<'a> {
    type Inner = Map<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> Map<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Map { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MapArgs<'args>) -> flatbuffers::WIPOffset<Map<'bldr>> {
      let mut builder = MapBuilder::new(_fbb);
      if let Some(x) = args.mappings { builder.add_mappings(x); }
      if let Some(x) = args.sources_content { builder.add_sources_content(x); }
      if let Some(x) = args.sources { builder.add_sources(x); }
      if let Some(x) = args.names { builder.add_names(x); }
      builder.finish()
    }

    pub const VT_NAMES: flatbuffers::VOffsetT = 4;
    pub const VT_SOURCES: flatbuffers::VOffsetT = 6;
    pub const VT_SOURCES_CONTENT: flatbuffers::VOffsetT = 8;
    pub const VT_MAPPINGS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn names(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Map::VT_NAMES, None)
  }
  #[inline]
  pub fn sources(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Map::VT_SOURCES, None)
  }
  #[inline]
  pub fn sources_content(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Map::VT_SOURCES_CONTENT, None)
  }
  #[inline]
  pub fn mappings(&self) -> Option<&'a [Mapping]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Mapping>>>(Map::VT_MAPPINGS, None).map(|v| v.safe_slice())
  }
}

impl flatbuffers::Verifiable for Map<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>(&"names", Self::VT_NAMES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>(&"sources", Self::VT_SOURCES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>(&"sources_content", Self::VT_SOURCES_CONTENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Mapping>>>(&"mappings", Self::VT_MAPPINGS, false)?
     .finish();
    Ok(())
  }
}
pub struct MapArgs<'a> {
    pub names: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub sources: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub sources_content: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub mappings: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Mapping>>>,
}
impl<'a> Default for MapArgs<'a> {
    #[inline]
    fn default() -> Self {
        MapArgs {
            names: None,
            sources: None,
            sources_content: None,
            mappings: None,
        }
    }
}
pub struct MapBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MapBuilder<'a, 'b> {
  #[inline]
  pub fn add_names(&mut self, names: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Map::VT_NAMES, names);
  }
  #[inline]
  pub fn add_sources(&mut self, sources: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Map::VT_SOURCES, sources);
  }
  #[inline]
  pub fn add_sources_content(&mut self, sources_content: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Map::VT_SOURCES_CONTENT, sources_content);
  }
  #[inline]
  pub fn add_mappings(&mut self, mappings: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Mapping>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Map::VT_MAPPINGS, mappings);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MapBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MapBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Map<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Map<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Map");
      ds.field("names", &self.names());
      ds.field("sources", &self.sources());
      ds.field("sources_content", &self.sources_content());
      ds.field("mappings", &self.mappings());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_map<'a>(buf: &'a [u8]) -> Map<'a> {
  unsafe { flatbuffers::root_unchecked::<Map<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_map<'a>(buf: &'a [u8]) -> Map<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Map<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `Map`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_map_unchecked`.
pub fn root_as_map(buf: &[u8]) -> Result<Map, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Map>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Map` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_map_unchecked`.
pub fn size_prefixed_root_as_map(buf: &[u8]) -> Result<Map, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Map>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Map` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_map_unchecked`.
pub fn root_as_map_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Map<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Map<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Map` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_map_unchecked`.
pub fn size_prefixed_root_as_map_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Map<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Map<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Map and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Map`.
pub unsafe fn root_as_map_unchecked(buf: &[u8]) -> Map {
  flatbuffers::root_unchecked::<Map>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Map and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Map`.
pub unsafe fn size_prefixed_root_as_map_unchecked(buf: &[u8]) -> Map {
  flatbuffers::size_prefixed_root_unchecked::<Map>(buf)
}
#[inline]
pub fn finish_map_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Map<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_map_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Map<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod SourceMapSchema

